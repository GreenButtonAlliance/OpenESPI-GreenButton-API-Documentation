{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "http://greenbuttondata.org/datacustodian",
  "resourcePath": "/usagepoint",
  "produces": [
    "application/xml",
    "text/plain",
    "text/html"
  ],
  "apis": [
    {
      "path": "/usagepoint",
      "operations": [
        {
          "method": "GET",
          "summary": "Finds all Usage Points",
          "notes": "An XML representation of all Usage Points will be returned",
          "responseClass": "<feed> ... </feed>",
          "nickname": "findUsagePoints",
          "produces": [
            "application/xml"
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "There are no Usage Points"
            }
          ]
	      },
        {
          "method": "POST",
          "summary": "Add a new Usage Point to the Data Custodian",
          "notes": "The New Usage Point will be added",
          "responseClass": "void",
          "nickname": "addUsagePoint",
          "parameters": [
            {
              "name": "MeterReading",
              "description": "0 or more MeterReadings that need to be added to the UsagePoint",
              "required": false,
              "allowMultiple": true,
              "dataType": "MeterReading",
              "paramType": "MeterReading"
            }
          ],
          "responseMessages": [
            {
              "code": 405,
              "message": "Invalid input"
            }
          ]
        }
      ]
    },
    {
      "path": "/usagepoint/{UsagePointID}",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve a UsagePoint Using it's ID",
          "notes": "Returns a Usage Point",
          "responseClass": "UsagePoint",
          "nickname": "getUsagePoint",
          "produces": [
            "application/xml"
          ],
          "authorizations": [
            "oauth2"
          ],
          "parameters": [
            {
              "name": "usagepontID",
              "description": "ID of the UsagePoint that needs to be fetched",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid UsagePoint ID supplied"
            },
            {
              "code": 404,
              "message": "UsagePoint not found"
            }
          ]
        },
        {
          "method": "PUT",
          "summary": "Update an existing Usage Point within the DataCustodian",
          "notes": "The Usage Point must exist",
          "responseClass": "void",
          "nickname": "updateUsagePoint",
          "parameters": [
            {
              "name": "MeterReading",
              "description": "A Usage Point object that needs to be updated",
              "required": true,
              "allowMultiple": false,
              "dataType": "UsagePoint",
              "paramType": "MeterReading"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid UsagePointID supplied"
            },
            {
              "code": 404,
              "message": "Usage Point not found"
            },
            {
              "code": 405,
              "message": "Validation exception"
            }
          ]
	},
        {
          "method": "DELETE",
          "summary": "Deletes a Usage Point",
          "notes": "",
          "responseClass": "void",
          "nickname": "deleteUsagePoint",
          "parameters": [
            {
              "name": "UsagePointID",
              "description": "Usage Point to delete",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid UsagePointID"
            }
          ]
        }

      ]
    }
  ],
  "models": {
    "Authorization": {
      "id": "Authorization",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UsagePoint": {
      "id": "UsagePoint",
      "description": "A pet is a person's best friend",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "MeterReadings": {
          "type": "list",
          "items": {
            "$ref": "MeterReading"
          }
        },
        "ReadingType": {
          "type": "array",
          "items": {
            "$ref": "ReadingType"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        },
        "MeterReadingCollection": {
          "$ref": "MeterReading"
        }
      }
    },
    "MeterReading": {
      "id": "MeterReading",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApplicationInformation": {
      "id": "ApplicationInformation",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Subscription": {
      "id": "Subscription",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReadingType": {
      "id": "ReadingType",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IntervalBlock": {
      "id": "IntervalBlock",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ElectricPowerUsageSummary": {
      "id": "ElectricPowerUsageSummary",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "LocalTime": {
      "id": "LocalTime",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ElectricPowerUsageSummary": {
      "id": "ElectricPowerUsageSummary",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }

  }
}