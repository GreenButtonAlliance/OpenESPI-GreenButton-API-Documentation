{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "http://greenbuttondata.org/datacustodian",
  "resourcePath": "/",
  "produces": [
    "application/xml",
    "application/json",
    "text/plain",
    "text/html"
  ],
  "apis": [
    {
      "path": "/espi/1.1/register",
      "operations" : [
        {
	 "method": "POST",
	 "summary": "Register the requesting Third Party as an Authorized Third Party Application",
	 "notes": "Follows the proposed OAuth2 Registration pattern",
	 "responseClass" : "A redict URL",
	 "nickname" : "registerThirdParty",
	 "parameters" : [
	   {"redirect_uris" : "A URI to handle the redirect back to the requesting Third Party",
	    "summary" : "A URI that will be called during the OAuth2 Registration process",
	    "description" : "An OAuth2 Registration Description from the pending RFC",
            "required": true,
            "allowMultiple": false,
            "dataType": "URI",
            "paramType": "string"
	    },
	   {"client_name" : "The Pretty Name of the  Third Party Application",
	    "summary" : "A human readable name of the requesting Third Party",
	    "description" : "A human readable name of the requesting Third Party",
            "required": true,
            "allowMultiple": false,
            "dataType": "client_name",
            "paramType": "string"
	    },
	   {"tos_uri" : "The Terms of Service of the requesting  Third Party Application",
	    "summary" : "The public URI of the Terms of Service of the  Third Party Application",
	    "description" : "The public URI of the Terms of Service of the  Third Party Application",
            "required": true,
            "allowMultiple": false,
            "dataType": "tos_uri",
            "paramType": "string"
	    },
	   {"policy_uri" : "The URI of the usage policy of the requesting  Third Party Application",
	    "summary" : "The public URI of the usage policy of the requesting Third Party Application",
	    "description" : "The URI of a document describing the Usage Policy of the requesting Third Party Application",
            "required": true,
            "allowMultiple": false,
            "dataType": "policy_uri",
            "paramType": "string"
	    },
	   {"token_endpoint_auth_method" : "The OAuth Token Endpoint Authorization Method",
	    "summary" : "Must be the string: client_secret_basic",
	    "description" : "the token endpoint authorization method as described in the pending OAuth2 Registration documents. Must be the value client_secret_basic",
            "required": true,
            "allowMultiple": false,
            "dataType": "OAuth2_auth_method_endpoint",
            "paramType": "string"
	    },
	   {"scope" : "The OAuth2 scope string",
	    "summary" : "The OAuth2 scope requested",
	    "description" : "The scope of access requested by the requesting <b>Third Party Application</b>.",
            "required": true,
            "allowMultiple": false,
            "dataType": "OAuth2_Scope_String",
            "paramType": "string"
	    },
	   {"grant_types" : "The OAuth2 grant types",
	    "summary" : "The OAuth2 grant types requested",
	    "description" : "The OAuth2 grant types MUST be: [\"auhoriztion_code\", \"client_credentials\", \"refresh_token\"]",
            "required": true,
            "allowMultiple": false,
            "dataType": "OAuth2_Grant_Type_String",
            "paramType": "string"
	    },
	   {"response_types" : "The OAuth2 response types",
	    "summary" : "The OAuth2 response types", 
	    "description" : "The OAuth2 response types: must be the string: \"code\"",
            "required": true,
            "allowMultiple": false,
            "dataType": "OAuth2_Response_Type_String",
            "paramType": "string"
	    },
	   {"grant_types" : "The OAuth2 application description",
	    "summary" : "The OAuth2 application description",
	    "description" : "The OAuth2 application description string",
            "required": true,
            "allowMultiple": false,
            "dataType": "OAuth2_application_description",
            "paramType": "string"
	    },
	   {"application_type" : "The OAuth2 application_type",
	    "summary" : "The OAuth2 application_type",
	    "description" : "The OAuth2 application_type, must be \"1\" |  \"2\" | \"3\"",
            "required": true,
            "allowMultiple": false,
            "dataType": "application_type",
            "paramType": "string"
	    },
	   {"application_use" : "The OAuth2 application_use",
	    "summary" : "The OAuth2 application_use",
	    "description" : "The OAuth2 application_use, must be \"1\" |  \"2\" | \"3\" | \"4\" | \"5\"",
            "required": true,
            "allowMultiple": false,
            "dataType": "application_use",
            "paramType": "string"
	    },
	   {"third_party_application_status" : "The OAuth2 third_party_application_status",
	    "summary" : "The Third Party Application Status",
	    "description" : "The OAuth2 third_party_application_status, must be \"1\" |  \"2\" | \"3\" | \"4\" | \"5\" | \"6\" ",
            "required": true,
            "allowMultiple": false,
            "dataType": "third_party_application_status",
            "paramType": "string"
	    },
	   {"third_party_notify_uri" : "The OAuth2 third_party_notify_uri",
	    "summary" : "The Third Party Application Notification URI",
	    "description" : "A URI that will be called via HTTP GET when the Data Custodian has a new delivery of usage information available.",
            "required": true,
            "allowMultiple": false,
            "dataType": "third_party_notification_uri",
            "paramType": "string"
	    }
	    ],	    
	 "produces" : [
	   "application/json"
	   ],
	 "responseMessages" : [
	    {"code" : 200,
             "message" : "an OAuth2 Response Message",
             "parameters" : [
	       {"client_id" : "the Third Party Client ID",
	        "client_secret" : "The Third Party Client Secret",
		"client_secretexpires_at" : "Client Secret Expiration Time",
		"client_id_issued_at" : "{ClientIDIssuedTimestamp}"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
    {
      "path": "/oauth/2.0/token",
      "operations" : [
        {
	 "method": "POST",
	 "summary": "A Third Party utilizes the HTTP Basic authentication scheme as defined in [RFC2617] to authenticate with the Data Custodian AuthorizationServer.",
	 "notes": "The HTTP header must contain the Authorization: Basic {DataCustodianAuthorizationString}. This is typically an APIKey -  A string assigned by the DataCustodian {AuthorizationServer} used to authenticate the Third Party.  The Third Party utilizes the HTTP Basic authentication scheme [RFC2617] to submit this string.",
	 "responseClass" : "OAuth2 JSON structure",
	 "nickname" : "getAuthorizationToken",
	 "parameters" : [
	   {"grant_type" : "client_credentials",
	    "summary" : "The OAuth2 client credentials grant type", 
	    "description" : "An OAuth2 defined grant type",
            "required": true,
            "allowMultiple": false,
            "dataType": "grant_type",
            "paramType": "string"
	    }
	    ],	    
	 "produces" : [
	   "application/json"
	   ],
	 "responseMessages" : [
	    {"code" : 200,
             "message" : "an OAuth2 Response Message",
             "parameters" : [
	       {"access_token" : "A valid access_token",
	        "token_type" : "bearer",
		"expires_in" : "Access Token Expiration Time"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
    {
      "path": "/oauth/2.0/token",
      "operations" : [
        {
	 "method": "POST",
	 "summary": "A Third Party utilizes the HTTP Basic authentication scheme as defined in [RFC2617] to authenticate with the Data Custodian AuthorizationServer.",
	 "notes": "The HTTP header must contain the Authorization: Basic {DataCustodianAuthorizationString}. This is typically an APIKey -  A string assigned by the DataCustodian {AuthorizationServer} used to authenticate the Third Party.  The Third Party utilizes the HTTP Basic authentication scheme [RFC2617] to submit this string.",
	 "responseClass" : "OAuth2 JSON structure",
	 "nickname" : "getAuthorizationToken",
	 "parameters" : [
	   {"grant_type" : "client_credentials",
	    "summary" : "The OAuth2 client credentials grant type", 
	    "description" : "An OAuth2 defined grant type",
            "required": true,
            "allowMultiple": false,
            "dataType": "grant_type",
            "paramType": "string"
	    }
	    ],	    
	 "produces" : [
	   "application/json"
	   ],
	 "responseMessages" : [
	    {"code" : 200,
             "message" : "an OAuth2 Response Message",
             "parameters" : [
	       {"access_token" : "A valid access_token",
	        "token_type" : "bearer",
		"expires_in" : "Access Token Expiration Time"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
    {
      "path": "/espi/1_1/resource/ReadServiceStatus",
      "operations" : [
        {
	 "method": "GET",
	 "summary": "Obtain the Data Custodian Resource Server Status",
	 "notes": "The HTTP header must contain a valid access_token of token_type \"bearer\" as well as a valid expires_in time.",
	 "responseClass" : "application/atom+xml",
	 "nickname" : "getServiceStatus",
	 "produces" : [
	   "application/xml"
	   ],
	 "responseMessages" : [
	    {"code" : 200,
             "parameters" : [
	       {
                "feed" : "An ESPI XML representation of <example to be supplied>"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
   
    {
      "path": "/retailcustomer",
      "operations": [
        {
          "method": "GET",
          "summary": "Finds all Retail Customers",
          "notes": "An XML representation of all Retail Customers will be returned",
          "responseClass": "<feed> ... </feed>",
          "nickname": "findRetailCustomers",
          "produces": [
            "application/xml",
            "text/html"
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "There are no Retail Customers"
            }
          ]
        },
        {
          "method": "POST",
          "summary": "Add a new Retail Customer to the Data Custodian",
          "notes": "The New Retail Customer will be added",
          "responseClass": "void",
          "nickname": "addRetailCustomer",
          "parameters": [
            {
              "firstName": "Retail Customer First Name",
              "description": "A Retail Customer First Name",
              "required": false,
              "allowMultiple": false,
              "dataType": "String",
              "paramType": "string"
            },
            {
              "lastName": "Retail Customer Last Name",
              "description": "A Retail Customer Last Name",
              "required": true,
              "allowMultiple": false,
              "dataType": "String",
              "paramType": "string"
            },
            {
              "Phone": "Retail Customer Home Number",
              "description": "Retail Customer Home Number",
              "required": true,
              "allowMultiple": false,
              "dataType": "String",
              "paramType": "string"
            }


          ],
          "responseMessages": [
            {
              "code": 405,
              "message": "Invalid input"
            }
          ]
        }
      ]
    },
    {
      "path": "/subscription/{SubscriptionID}",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve a Subscription Using it's ID",
          "notes": "Returns a Subscription",
          "responseClass": "Subscription",
          "nickname": "getSubscription",
          "produces": [
            "application/xml"
          ],
          "authorizations": [
            "oauth2"
          ],
          "parameters": [
            {
              "name": "usagepontID",
              "description": "ID of the Subscription that needs to be fetched",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid Subscription ID supplied"
            },
            {
              "code": 404,
              "message": "Subscription not found"
            }
          ]
        },
        {
          "method": "PUT",
          "summary": "Update an existing Subscription within the DataCustodian",
          "notes": "The Subscription must exist",
          "responseClass": "void",
          "nickname": "updateSubscription",
          "parameters": [
            {
              "name": "Subscription",
              "description": "A Subscription object that needs to be updated",
              "required": true,
              "allowMultiple": false,
              "dataType": "Subscription",
              "paramType": "Subscription"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid SubscriptionID supplied"
            },
            {
              "code": 404,
              "message": "Subscription not found"
            },
            {
              "code": 405,
              "message": "Validation exception"
            }
          ]
	},
        {
          "method": "DELETE",
          "summary": "Deletes a Subscription",
          "notes": "",
          "responseClass": "void",
          "nickname": "deleteSubscription",
          "parameters": [
            {
              "name": "SubscriptionID",
              "description": "Subscription id to delete",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid Subscription ID"
            }
          ]
        }

      ]
    },
    {
      "path": "/authorization",
      "operations": [
        {
          "method": "GET",
          "summary": "Finds all Authorizations",
          "notes": "An XML representation of all Authorizations will be returned",
          "responseClass": "<feed> ... </feed>",
          "nickname": "findAuthorizations",
          "produces": [
            "application/xml"
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "There are no Authorizations"
            }
          ]
	      },
        {
          "method": "POST",
          "summary": "Add a new Authorization to the Data Custodian",
          "notes": "The New Authorization will be added",
          "responseClass": "void",
          "nickname": "addAuthorization",
          "parameters": [
            {
              "name": "Authorization",
              "description": "0 or more Authorizations that need to be added to the Authorization",
              "required": false,
              "allowMultiple": true,
              "dataType": "Authorization",
              "paramType": "Authorization"
            }
          ],
          "responseMessages": [
            {
              "code": 405,
              "message": "Invalid input"
            }
          ]
        }
      ]
    },
    {
      "path": "/authorization/{AuthorizationID}",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve a Authorization Using it's ID",
          "notes": "Returns a Authorization",
          "responseClass": "Authorization",
          "nickname": "getAuthorization",
          "produces": [
            "application/xml"
          ],
          "authorizations": [
            "oauth2"
          ],
          "parameters": [
            {
              "name": "usagepontID",
              "description": "ID of the Authorization that needs to be fetched",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid Authorization ID supplied"
            },
            {
              "code": 404,
              "message": "Authorization not found"
            }
          ]
        },
        {
          "method": "PUT",
          "summary": "Update an existing Authorization within the DataCustodian",
          "notes": "The Authorization must exist",
          "responseClass": "void",
          "nickname": "updateAuthorization",
          "parameters": [
            {
              "name": "Authorization",
              "description": "A Authorization object that needs to be updated",
              "required": true,
              "allowMultiple": false,
              "dataType": "Authorization",
              "paramType": "Authorization"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid AuthorizationID supplied"
            },
            {
              "code": 404,
              "message": "Authorization not found"
            },
            {
              "code": 405,
              "message": "Validation exception"
            }
          ]
	},
        {
          "method": "DELETE",
          "summary": "Deletes a Authorization",
          "notes": "",
          "responseClass": "void",
          "nickname": "deleteAuthorization",
          "parameters": [
            {
              "name": "AuthorizationID",
              "description": "Authorization id to delete",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid Authorization ID"
            }
          ]
        }

      ]
    },
    {
      "path": "/applicationinformation",
      "operations": [
        {
          "method": "GET",
          "summary": "Finds all Application Informations",
          "notes": "An XML representation of all Application Informations will be returned",
          "responseClass": "<feed> ... </feed>",
          "nickname": "findApplicationInformations",
          "produces": [
            "application/xml"
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "There are no Application Informations"
            }
          ]
	      },
        {
          "method": "POST",
          "summary": "Add a new Application Information to the Data Custodian",
          "notes": "The New Application Information will be added",
          "responseClass": "void",
          "nickname": "addApplicationInformation",
          "parameters": [
            {
              "name": "ApplicationInformation",
              "description": "0 or more Application Informations that need to be added to the ApplicationInformation",
              "required": false,
              "allowMultiple": true,
              "dataType": "ApplicationInformation",
              "paramType": "ApplicationInformation"
            }
          ],
          "responseMessages": [
            {
              "code": 405,
              "message": "Invalid input"
            }
          ]
        }
      ]
    },
    {
      "path": "/applicationinformation/{ApplicationInformationID}",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve a Application Information Using it's ID",
          "notes": "Returns a Application Information",
          "responseClass": "ApplicationInformation",
          "nickname": "getApplicationInformation",
          "produces": [
            "application/xml"
          ],
          "applicationinformations": [
            "oauth2"
          ],
          "parameters": [
            {
              "name": "usagepontID",
              "description": "ID of the Application Information that needs to be fetched",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid Application Information ID supplied"
            },
            {
              "code": 404,
              "message": "Application Information not found"
            }
          ]
        },
        {
          "method": "PUT",
          "summary": "Update an existing Application Information within the DataCustodian",
          "notes": "The Application Information must exist",
          "responseClass": "void",
          "nickname": "updateApplicationInformation",
          "parameters": [
            {
              "name": "ApplicationInformation",
              "description": "A Application Information object that needs to be updated",
              "required": true,
              "allowMultiple": false,
              "dataType": "ApplicationInformation",
              "paramType": "ApplicationInformation"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid Application InformationID supplied"
            },
            {
              "code": 404,
              "message": "Application Information not found"
            },
            {
              "code": 405,
              "message": "Validation exception"
            }
          ]
	},
        {
          "method": "DELETE",
          "summary": "Deletes an Application Information",
          "notes": "",
          "responseClass": "void",
          "nickname": "deleteApplicationInformation",
          "parameters": [
            {
              "name": "ApplicationInformationID",
              "description": "Application Information id to delete",
              "required": true,
              "allowMultiple": false,
              "dataType": "string",
              "paramType": "path"
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Invalid Application Information ID"
            }
          ]
        }

      ]
    }

  ],
  "models": {
    "Authorization": {
      "id": "Authorization",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UsagePoint": {
      "id": "UsagePoint",
      "description": "A pet is a person's best friend",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "MeterReadings": {
          "type": "list",
          "items": {
            "$ref": "MeterReading"
          }
        },
        "ReadingType": {
          "type": "array",
          "items": {
            "$ref": "ReadingType"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        },
        "MeterReadingCollection": {
          "$ref": "MeterReading"
        }
      }
    },
    "MeterReading": {
      "id": "MeterReading",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApplicationInformation": {
      "id": "ApplicationInformation",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Subscription": {
      "id": "Subscription",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReadingType": {
      "id": "ReadingType",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IntervalBlock": {
      "id": "IntervalBlock",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ElectricPowerUsageSummary": {
      "id": "ElectricPowerUsageSummary",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "LocalTime": {
      "id": "LocalTime",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ElectricPowerQualitySummary": {
      "id": "ElectricPowerQualitySummary",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }

  }
}
