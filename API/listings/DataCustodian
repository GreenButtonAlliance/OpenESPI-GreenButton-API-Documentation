{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "http://greenbuttondata.org/datacustodian",
  "resourcePath": "/",
  "produces": [
    "application/xml",
    "application/json",
    "text/plain",
    "text/html"
  ],
  "apis": [
    {
      "path": "/espi/1_1/register/",
      "operations" : [
        {
	 "method": "POST",
	 "summary": "Register the requesting Third Party as an Authorized Third Party Application",
	 "notes": "Follows the proposed OAuth2 Registration pattern",
	 "responseClass" : "A redict URL",
	 "nickname" : "registerThirdParty",
	 "parameters" : [
	   {
	    "paramType": "form",
            "name": "redirect_uris",
	    "description" : "A URI to handle the redirect back to the requesting Third Party as part of the OAuth2 Registration (RFC Pending)",
            "required": true,
            "allowMultiple": false,
	    "defaultValue" : "http://greenbuttondata.org/thirdparty/RegistrationRedirect",
            "dataType": "String"
	    },
	   {
            "paramType": "form",
	    "name" : "client_name",
	    "description" : "A human readable name of the requesting Third Party",
            "required": true,
	    "defaultValue" : "OpenESPI Green Button Third Party",
            "allowMultiple": false,
            "dataType": "String"
	    },
	   {
            "paramType": "form",
            "name" : "tos_uri",
	    "description" : "The public URI of the Terms of Service of the  Third Party Application",
            "required": true,
            "allowMultiple": false,
	    "defaultValue" : "http://greenbuttondata.org/thirdparty/TermsOfService",
            "dataType": "String"
	    },
	   {
            "paramType" : "form",
	    "name" : "policy_uri",
	    "description" : "The URI of a document describing the Usage Policy of the requesting Third Party Application",
            "required": true,
            "allowMultiple": false,
	    "defaultValue" : "http://greenbuttondata.org/thirdparty/UsagePolicy",
            "dataType": "String"
	    },
	   {
            "paramType": "form",
	    "name" : "token_endpoint_auth_method",
	    "description" : "the token endpoint authorization method as described in the pending OAuth2 Registration documents. Must be the value client_secret_basic",
	    "defaultValue" : "client_secret_basic",
            "required": true,
            "allowMultiple": false,
            "dataType": "String"
	    },
	   {
            "paramType": "form",
	    "name" : "scope",
	    "description" : "The scope of access requested by the requesting Third Party Application.",
            "required": true,
            "allowMultiple": false,
	    "defaultValue": "1 | 2 | 3 | 4",
            "dataType": "String",
	    "enum" : [
              "1", "2", "3", "4"
             ]
	    },
	   {
	    "grant_types" : "The OAuth2 grant types",
	    "summary" : "The OAuth2 grant types requested",
	    "description" : "The OAuth2 grant types MUST be: [\"auhoriztion_code\", \"client_credentials\", \"refresh_token\"]",
            "required": true,
            "allowMultiple": false,
	    "defaultValue": "OAuth2_Grant_Type_String",
            "dataType": "String",
            "paramType": "form"
	    },
	   {
	    "response_types" : "The OAuth2 response types",
	    "summary" : "The OAuth2 response types", 
	    "description" : "The OAuth2 response types: must be the string: \"code\"",
            "required": true,
	    "defaultValue" : "code",
            "allowMultiple": false,
            "dataType": "String",
            "paramType": "form"
	    },
	   {
	    "grant_types" : "The OAuth2 application description",
	    "summary" : "The OAuth2 application description",
	    "description" : "The OAuth2 application description string",
            "required": true,
	    "defaultValue" : "OpenESPI Third Party Green Button Application Service",
            "allowMultiple": false,
            "dataType": "String",
            "paramType": "form"
	    },
	   {
	    "application_type" : "The OAuth2 application_type",
	    "summary" : "The OAuth2 application_type",
	    "description" : "The OAuth2 application_type, must be \"1\" |  \"2\" | \"3\"",
            "required": true,
	    "defaultValue" : "1 | 2 | 3", 
            "allowMultiple": false,
            "dataType": "String",
            "paramType": "form"
	    },
	   {
	    "application_use" : "The OAuth2 application_use",
	    "summary" : "The OAuth2 application_use",
	    "description" : "The OAuth2 application_use, must be \"1\" |  \"2\" | \"3\" | \"4\" | \"5\"",
            "required": true,
            "allowMultiple": false,
	    "defaultValue" : "1 | 2 | 3 | 4 | 5",
            "dataType": "String",
            "paramType": "form"
	    },
	   {
	    "third_party_application_status" : "The OAuth2 third_party_application_status",
	    "summary" : "The Third Party Application Status",
	    "description" : "The OAuth2 third_party_application_status, must be \"1\" |  \"2\" | \"3\" | \"4\" | \"5\" | \"6\" ",
            "required": true,
            "allowMultiple": false,
	    "defaultValue" : "1 | 2 | 3 | 4 | 5 | 6",
            "dataType": "String",
            "paramType": "form"
	    },
	   {
	    "third_party_notify_uri" : "The OAuth2 third_party_notify_uri",
	    "summary" : "The Third Party Application Notification URI",
	    "description" : "A URI that will be called via HTTP GET when the Data Custodian has a new delivery of usage information available.",
            "required": true,
            "allowMultiple": false,
	    "defaultValue" : "https://www.greenbuttondata.org/thirdparty/Notify_SubscriptionAvailable",
            "dataType": "String",
            "paramType": "form"
	    }
	    ],	    
	 "produces" : [
	   "application/json"
	   ],
	 "responseMessages" : [
	    {"code" : 200,
             "message" : "an OAuth2 Response Message",
             "parameters" : [
	       {"client_id" : "the Third Party Client ID",
	        "client_secret" : "The Third Party Client Secret",
		"client_secretexpires_at" : "Client Secret Expiration Time",
		"client_id_issued_at" : "{ClientIDIssuedTimestamp}"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
    {
      "path": "/oauth/2_0/token",
      "operations" : [
        {
	 "method": "POST",
	 "summary": "A Third Party utilizes the HTTP Basic authentication scheme as defined in [RFC2617] to authenticate with the Data Custodian AuthorizationServer.",
	 "notes": "The HTTP header must contain the Authorization: Basic {DataCustodianAuthorizationString}. This is typically an APIKey -  A string assigned by the DataCustodian {AuthorizationServer} used to authenticate the Third Party.  The Third Party utilizes the HTTP Basic authentication scheme [RFC2617] to submit this string.",
	 "responseClass" : "OAuth2 JSON structure",
	 "nickname" : "getAuthorizationToken",
	 "parameters" : [
	   {"grant_type" : "client_credentials",
	    "summary" : "The OAuth2 client credentials grant type", 
	    "description" : "An OAuth2 defined grant type",
            "required": true,
            "allowMultiple": false,
	    "defaultValue": "client_credtials",
            "dataType": "grant_type",
            "paramType": "header"
	    }
	    ],	    
	 "produces" : [
	   "application/json"
	   ],
	 "responseMessages" : [
	    {"code" : 200,
             "message" : "an OAuth2 Response Message",
             "parameters" : [
	       {"access_token" : "A valid access_token",
	        "token_type" : "bearer",
		"expires_in" : "Access Token Expiration Time"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
    {
      "path": "/oauth/2_0/token",
      "operations" : [
        {
	 "method": "POST",
	 "summary": "A Third Party utilizes the HTTP Basic authentication scheme as defined in [RFC2617] to authenticate with the Data Custodian AuthorizationServer.",
	 "notes": "The HTTP header must contain the Authorization: Bearer {DataCustodianAuthorizationString}. This is typically an APIKey -  A string assigned by the DataCustodian {AuthorizationServer} used to authenticate the Third Party.  The Third Party utilizes the HTTP Basic authentication scheme [RFC2617] to submit this string.",
	 "responseClass" : "OAuth2 JSON structure",
	 "nickname" : "getAuthorizationToken",
	 "parameters" : [
	   {"grant_type" : "client_credentials",
	    "summary" : "The OAuth2 client credentials grant type", 
	    "description" : "An OAuth2 defined grant type",
            "required": true,
            "allowMultiple": false,
	    "defaultValue" : "Bearer {DataCustodianAuthorizationString}",
            "dataType": "String",
            "paramType": "head"
	    }
	    ],	    
	 "produces" : [
	   "application/json"
	   ],
	 "responseMessages" : [
	    {"code" : 200,
             "message" : "an OAuth2 Response Message",
             "parameters" : [
	       {"access_token" : "A valid access_token",
	        "token_type" : "bearer",
		"expires_in" : "Access Token Expiration Time"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
    {
      "path": "/espi/1_1/resource/ReadServiceStatus",
      "operations" : [
        {
	 "method": "GET",
	 "summary": "Obtain the Data Custodian Resource Server Status",
	 "notes": "The HTTP header must contain a valid access_token of token_type \"bearer\" as well as a valid expires_in time.",
	 "responseClass" : "application/atom+xml",
	 "nickname" : "getServiceStatus",
	 "produces" : [
	   "application/xml"
	   ],
          "authorizations": [
            "oauth2"
          ],
          "parameters": [
            {
              "name": "Authorization",
              "description": "Access Token",
	      "defaultValue": "Basic {access_token}",
              "required": true,
              "allowMultiple": false,
              "dataType": "String",
              "paramType": "header"
            },
            {
              "name": "Accept",
              "description": "Accept type for the Request",
	      "defaultValue": "application/atom+xml",
              "required": true,
              "allowMultiple": false,
              "dataType": "String",
              "paramType": "header"
            }
	 ],
	 "responseMessages" : [
	    {"code" : 200,
             "parameters" : [
	       {
                "feed" : "An ESPI XML representation of <example to be supplied>"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    },
    {
      "path": "/espi/1_1/resource/ThirdParty/{ThirdPartyID}/Batch",
      "operations" : [
        {
	 "method": "GET",
	 "summary": "A Third Party requests the GET of a Batch.",
	 "notes": "",
	 "responseClass" : "ESPI XML structure of Batch feed",
	 "nickname" : "getBatch",
	 "produces" : [
	   "application/atom+xml"
	   ],

          "authorizations": [
            "oauth2"
          ],
          "parameters": [
            {
              "name": "Authorization",
              "description": "Access Token",
	      "defaultValue": "Basic {access_token}",
              "required": true,
              "allowMultiple": false,
              "dataType": "String",
              "paramType": "header"
            },
            {
              "name": "Accept",
              "description": "Accept type for the Request",
	      "defaultValue": "application/atom+xml",
              "required": true,
              "allowMultiple": false,
              "dataType": "String",
              "paramType": "header"
            }
          ],

	 "responseMessages" : [
	    {"code" : 200,
             "message" : "an OAuth2 Response Message",
             "parameters" : [
	       {"access_token" : "A valid access_token",
	        "token_type" : "bearer",
		"expires_in" : "Access Token Expiration Time"
	       }
	      ]
	    },
	    {
   	     "code" : 400,
	     "message" : "Service Not Available"
	    }
	  ]
      }
     ]
    }
  ],
  "models": {
    "Authorization": {
      "id": "Authorization",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UsagePoint": {
      "id": "UsagePoint",
      "description": "A pet is a person's best friend",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "MeterReadings": {
          "type": "list",
          "items": {
            "$ref": "MeterReading"
          }
        },
        "ReadingType": {
          "type": "array",
          "items": {
            "$ref": "ReadingType"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        },
        "MeterReadingCollection": {
          "$ref": "MeterReading"
        }
      }
    },
    "MeterReading": {
      "id": "MeterReading",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApplicationInformation": {
      "id": "ApplicationInformation",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Subscription": {
      "id": "Subscription",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReadingType": {
      "id": "ReadingType",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IntervalBlock": {
      "id": "IntervalBlock",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ElectricPowerUsageSummary": {
      "id": "ElectricPowerUsageSummary",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "LocalTime": {
      "id": "LocalTime",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ElectricPowerQualitySummary": {
      "id": "ElectricPowerQualitySummary",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }

  }
}
